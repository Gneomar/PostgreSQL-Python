DROP TABLE IF EXISTS etapas;
CREATE TABLE etapas (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "ruta etapa" TEXT,
    "Codificacion" TEXT,
    "Carpeta Etapa" TEXT,
    "Guiones" TEXT,
    "N Romanos" TEXT,
    "Etapa Repetida" TEXT,
    "Errores" INTEGER,
    "Codificacion Etapa" TEXT PRIMARY KEY NOT NULL
);

-- Crear la funcion para actualizar updated_at
CREATE OR REPLACE FUNCTION update_etapas_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger que llama a la funcion antes de actualizar
CREATE TRIGGER update_etapas_updated_at_trigger
BEFORE UPDATE ON etapas
FOR EACH ROW
EXECUTE FUNCTION update_etapas_updated_at();

-- Crear indice unico
CREATE UNIQUE INDEX unique_etapas_codificacion_codificacion_etapa
ON etapas ("Codificacion", "Codificacion Etapa");
